//
// class Round {
//     constructor(private steps: Step[]) {}
//     evaluate(stepsTaken: Step[]): boolean {
//         if (stepsTaken.length !== this.steps.length) {
//             return false;
//         }
//
//         for (let i = 0; i < this.steps.length; i++) {
//             if (!this.steps[i].value().isEqual(stepsTaken[i])) {
//                 return false;
//             }
//         }
//
//         return true;
//     }
// }
//
// class Step {
//     constructor(private color: string) {}
//     isEqual(other: Step): boolean {
//         return other.color === this.color;
//     }
//
//     value() {
//         return this.color;
//     }
// }
//
// class Color {
//     constructor(private amount: number, private colors: Color[], private randomGenerator: Iterator<number>) {}
//     generate() {
//         let steps: Color[] = [];
//
//         for(let i = 0; i <= this.amount; i++) {
//             steps.push(this.colors[Math.floor(this.randomGenerator.next().value * this.colors.length)]);
//         }
//
//         return steps;
//     }
// }
//
// class RoundGenerator {
//     constructor(colors: string[], private numberOfSteps: number) {}
//     generate(): Round
//     {
//         const steps: Step[] = [];
//         for (let i = 0; i < this.numberOfSteps; i++) {
//             steps[i] = new Step('red');
//         }
//
//         return new Round(steps);
//     }
// }
//
// const roundGeneratorGenerator = (colors: string[], numberOfSteps: number) => {
//     return (): Round =>
//     {
//         const steps: Step[] = [];
//         for (let i = 0; i < numberOfSteps; i++) {
//             steps[i] = new Step('red');
//         }
//
//         return new Round(steps);
//     }
// };
//
// class Game {
//     private currentRound: Round;
//     private currentScore: number;
//     constructor(private power: boolean, private roundGenerator: RoundGenerator) {
//         this.currentScore = 0;
//     }
//
//     toggle(): boolean
//     {
//         if (!this.power) {
//             this.currentScore = 0;
//         }
//         return this.power = !this.power;
//     }
//
//     nextRound(): Round
//     {
//         return this.currentRound = this.roundGenerator.generate();
//     }
//
//     checkSteps(submittedSteps: Step[]): boolean
//     {
//         if (this.currentRound.evaluate(submittedSteps)) {
//             this.currentScore = this.currentScore + 1;
//
//             return true;
//         }
//
//         return false;
//     }
//
//     displayStats(): Stats
//     {
//         return new Stats(this.currentScore, this.power);
//     }
// }
//
// class ColorCircle {
//     constructor(private colors: string[]) {
//     }
//
//     render(color: string): string {
//         return `<div></div>`
//     }
// }
//
// goToRound(memory) {
//     this.userMemory = [];
//     const container = document.querySelector('.game-circle');
//     const buttonGre = container.querySelector('.buttonGre');
//     const buttonRed = container.querySelector('.buttonRed');
//     const buttonYel = container.querySelector('.buttonYel');
//     const buttonBlu = container.querySelector('.buttonBlu');
//
//     memory.map((item, i) => {
//         const iterator = i + 1;
//
//         switch (item) {
//             case 'Gre':
//                 setTimeout(() => { buttonGre.classList.add('selected'); }, 1000 * iterator);
//                 setTimeout(() => { buttonGre.classList.remove('selected'); }, 1000 * iterator + 200);
//                 break;
//             case 'Red':
//                 setTimeout(() => { buttonRed.classList.add('selected'); }, 1000 * iterator);
//                 setTimeout(() => { buttonRed.classList.remove('selected'); }, 1000 * iterator + 200);
//                 break;
//             case 'Yel':
//                 setTimeout(() => { buttonYel.classList.add('selected'); }, 1000 * iterator);
//                 setTimeout(() => { buttonYel.classList.remove('selected'); }, 1000 * iterator + 200);
//                 break;
//             case 'Blu':
//                 setTimeout(() => { buttonBlu.classList.add('selected'); }, 1000 * iterator);
//                 setTimeout(() => { buttonBlu.classList.remove('selected'); }, 1000 * iterator + 200);
//                 break;
//             default:
//                 break;
//         }
//     });
// }
//
//
// class Button {
//     constructor(private element: Element) {
//     }
//
//     lightUp(): Promise<void> {
//         return delayNext(() => { this.element.classList.add('selected'); }, 1000)
//             .then(() => {
//                 return delayNext(() => { this.element.classList.remove('selected'); }, 200);
//             });
//     }
// }
//
// const delayNext = (fn: Function, time: number): Promise<void> => {
//     fn();
//
//     return new Promise(function (resolve) {
//         setTimeout(resolve, time);
//     });
// };
//
// class Rounds {
//     private buttons: Map<string, Button>;
//     constructor(colors: string[]) {
//         this.buttons = new Map(colors.map((color) => {
//             return [color, new Button(document.querySelector(`.game-circle .button${color}`))];
//         }));
//     }
//
//     lightUp(memory: string[]): Promise<void> {
//         return memory.reduce((prev, color) => {
//             return prev.then(() => {
//                 return this.buttons.get(color).lightUp()
//             })
//         }, Promise.resolve());
//     }
// }
